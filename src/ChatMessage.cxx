// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file ChatMessage.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "ChatMessage.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

#define ChatMessage_max_cdr_typesize 524ULL;
#define ChatMessage_max_key_cdr_typesize 0ULL;

ChatMessage::ChatMessage()
{
    // string m_name
    m_name ="";
    // string m_data
    m_data ="";
    // unsigned long m_timestamp
    m_timestamp = 0;

}

ChatMessage::~ChatMessage()
{



}

ChatMessage::ChatMessage(
        const ChatMessage& x)
{
    m_name = x.m_name;
    m_data = x.m_data;
    m_timestamp = x.m_timestamp;
}

ChatMessage::ChatMessage(
        ChatMessage&& x) noexcept 
{
    m_name = std::move(x.m_name);
    m_data = std::move(x.m_data);
    m_timestamp = x.m_timestamp;
}

ChatMessage& ChatMessage::operator =(
        const ChatMessage& x)
{

    m_name = x.m_name;
    m_data = x.m_data;
    m_timestamp = x.m_timestamp;

    return *this;
}

ChatMessage& ChatMessage::operator =(
        ChatMessage&& x) noexcept
{

    m_name = std::move(x.m_name);
    m_data = std::move(x.m_data);
    m_timestamp = x.m_timestamp;

    return *this;
}

bool ChatMessage::operator ==(
        const ChatMessage& x) const
{

    return (m_name == x.m_name && m_data == x.m_data && m_timestamp == x.m_timestamp);
}

bool ChatMessage::operator !=(
        const ChatMessage& x) const
{
    return !(*this == x);
}

size_t ChatMessage::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return ChatMessage_max_cdr_typesize;
}

size_t ChatMessage::getCdrSerializedSize(
        const ChatMessage& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.name().size() + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.data().size() + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

void ChatMessage::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_name.c_str();
    scdr << m_data.c_str();
    scdr << m_timestamp;

}

void ChatMessage::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_name;
    dcdr >> m_data;
    dcdr >> m_timestamp;
}

/*!
 * @brief This function copies the value in member name
 * @param _name New value to be copied in member name
 */
void ChatMessage::name(
        const std::string& _name)
{
    m_name = _name;
}

/*!
 * @brief This function moves the value in member name
 * @param _name New value to be moved in member name
 */
void ChatMessage::name(
        std::string&& _name)
{
    m_name = std::move(_name);
}

/*!
 * @brief This function returns a constant reference to member name
 * @return Constant reference to member name
 */
const std::string& ChatMessage::name() const
{
    return m_name;
}

/*!
 * @brief This function returns a reference to member name
 * @return Reference to member name
 */
std::string& ChatMessage::name()
{
    return m_name;
}
/*!
 * @brief This function copies the value in member data
 * @param _data New value to be copied in member data
 */
void ChatMessage::data(
        const std::string& _data)
{
    m_data = _data;
}

/*!
 * @brief This function moves the value in member data
 * @param _data New value to be moved in member data
 */
void ChatMessage::data(
        std::string&& _data)
{
    m_data = std::move(_data);
}

/*!
 * @brief This function returns a constant reference to member data
 * @return Constant reference to member data
 */
const std::string& ChatMessage::data() const
{
    return m_data;
}

/*!
 * @brief This function returns a reference to member data
 * @return Reference to member data
 */
std::string& ChatMessage::data()
{
    return m_data;
}
/*!
 * @brief This function sets a value in member timestamp
 * @param _timestamp New value for member timestamp
 */
void ChatMessage::timestamp(
        uint32_t _timestamp)
{
    m_timestamp = _timestamp;
}

/*!
 * @brief This function returns the value of member timestamp
 * @return Value of member timestamp
 */
uint32_t ChatMessage::timestamp() const
{
    return m_timestamp;
}

/*!
 * @brief This function returns a reference to member timestamp
 * @return Reference to member timestamp
 */
uint32_t& ChatMessage::timestamp()
{
    return m_timestamp;
}



size_t ChatMessage::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return ChatMessage_max_key_cdr_typesize;
}

bool ChatMessage::isKeyDefined()
{
    return false;
}

void ChatMessage::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}

